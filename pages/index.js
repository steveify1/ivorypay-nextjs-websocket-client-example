import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';
import { io } from 'socket.io-client';
import { useRouter } from 'next/router';
import axios from 'axios';

export default function Home() {
  const apiBaseUrl = 'http://localhost:7000';
  const [transaction, setTransaction] = useState();
  const [isVerifying, setIsVerifying] = useState(false);
  const [verificationError, setVerificationError] = useState('');
  const router = useRouter();

  const handleVerification = async () => {
    if (isVerifying) return;
    setIsVerifying(true);
    try {
      const { data } = await axios.get(`${apiBaseUrl}/v1/transactions/${transaction.reference}/verify`);
      setTransaction(data.data);
      setVerificationError('');
    } catch (error) {
      setVerificationError(error.response?.data?.message || 'Omo! Monitor don spoil? Please retry..lol');
    }
    setIsVerifying(false);
  }

  useEffect(() => {
    if (router.query.tnxId) {
      const socket = io(`${apiBaseUrl}/${router.query.tnxId}`);
      socket.on('updated', (data) => {
        console.log(data);
        setTransaction(data);
      });
  
      socket.on('rehydrated', (data) => {
        console.log('Just rehydrated!');
      });
    }
  }, [router.query.tnxId]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Odogwu's Monitor
        </h1>

        <p className={styles.description}>
          Listening for changes on transaction with ID {' '}
          <br />
          <code className={styles.code}>{router.query.tnxId}</code>
        </p>

        <ul>
          <li><span>Reference:</span> {transaction?.reference}</li>
          <li>
            <span>Status:</span> {" "}
            {transaction ? (<a
              className={`${styles.status} ${styles[transaction?.status]}`}
            >
              {transaction?.status}
            </a>) : null}
          </li>
          <li><span>Crypto:</span> {transaction?.crypto}</li>
          <li><span>Address:</span> {transaction?.address}</li>
          <li><span>Total expected amount:</span> {transaction?.expectedAmountInCryptoPlusFee}</li>
        </ul>

        {transaction ? (<>
          <button
            className={styles.verifyButton}
            disabled={isVerifying}
            onClick={handleVerification}
          >
            {isVerifying ? 'Laying claim...' : 'Verify'}
          </button>
          <p className={styles.verifyError}>{verificationError}</p>
        </>): null}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
